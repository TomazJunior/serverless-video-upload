{"version":3,"sources":["components/AuthService.js","components/Auth.js","components/Videos.js","components/UploadVideo.js","components/Forbidden.js","App.js","serviceWorker.js","index.js"],"names":["AuthService","idToken","localStorage","setItem","getItem","this","getToken","Auth","auth","queryString","parse","props","location","hash","id_token","setToken","setTimeout","history","push","bind","Component","Videos","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","authService","state","videos","url","undefined","item","_this2","axios","post","headers","Authorization","concat","then","res","data","setState","prevState","_this3","get","sortBy","_this4","react_default","a","createElement","className","map","video","onClick","e","makeSignedUrl","key","createdAt","displayName","src","width","height","controls","UploadVideo","uploading","formData","FormData","append","target","files","config","Content-Type","finally","response","alert","catch","error","console","waitingLabel","accept","type","name","onChange","Forbidden","PrivateRoute","_ref","component","rest","objectWithoutProperties","react_router","assign","render","loggedIn","to","pathname","from","App","react_router_dom","href","path","App_PrivateRoute","Boolean","window","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d08063b9.chunk.js","sourcesContent":["export default class AuthService {\n  \n  setToken(idToken) {\n    localStorage.setItem('id_token', idToken)\n  }\n\n  getToken() {\n    return localStorage.getItem('id_token')\n  }\n\n  loggedIn() {\n    return !!this.getToken();\n  }\n}","import React, { Component } from 'react';\nimport queryString from 'query-string';\nimport AuthService from './AuthService';\n\nclass Auth extends Component {\n\n  componentDidMount() {\n    const auth = new AuthService();\n    const values = queryString.parse(this.props.location.hash);\n    const idToken = values.id_token;\n    if (idToken) {\n      auth.setToken(idToken);\n      setTimeout(function() {\n        //After 1 second render videos\n        this.props.history.push(\"/videos\");\n      }.bind(this), 1000)\n    } else {\n      this.props.history.push(\"/forbidden\");\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default Auth;","import React, { Component } from 'react';\nimport axios from 'axios'\nimport AuthService from './AuthService';\nimport { sortBy } from 'lodash';\n\nclass Videos extends Component {\n  \n  constructor() {\n    super();\n    this.authService = new AuthService();\n    this.state = {\n      videos: [],\n      url: undefined\n    };\n  }\n\n  makeSignedUrl(item) {\n    axios.post('https://j2dk62o9sk.execute-api.us-east-1.amazonaws.com/dev/signed-url',\n      item,\n      {\n        headers: {\n          Authorization: `Bearer ${this.authService.getToken()}`\n        }\n      }\n    ).then(res => {\n      const { url } = res.data;\n      this.setState(prevState => ({\n        videos: prevState.videos,\n        url\n      }));\n    });\n  }\n\n  componentDidMount () {\n    axios.get('https://j2dk62o9sk.execute-api.us-east-1.amazonaws.com/dev/video', {\n      headers: {\n        Authorization: `Bearer ${this.authService.getToken()}`\n      }\n    }).then(res => {\n      const videos = sortBy(res.data, 'createdAt');\n      this.setState({ videos });\n    });\n  }\n\n  render() {\n    return(\n      <div className=\"Video\">\n        <h2>Videos</h2>\n        <div className=\"row\">\n          <ul className=\"column\">\n            { this.state.videos.map(video => \n              <li onClick={(e)=>this.makeSignedUrl(video)} key={video.key}>{ video.createdAt } | { video.displayName } </li>\n            )}\n          </ul>\n          <div className=\"column\">\n            <video src={this.state.url} width=\"100%\" height=\"480px\" controls></video>\n          </div>\n        </div>\n        \n      </div>\n    )\n  }\n}\n\nexport default Videos;","import React, { Component } from 'react';\nimport axios from 'axios'\nimport AuthService from './AuthService';\n\nclass UploadVideo extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      uploading: false\n    };\n  }\n\n  onChange(e) {\n    const authService = new AuthService();\n    const url = 'https://j2dk62o9sk.execute-api.us-east-1.amazonaws.com/dev/upload';\n    const formData = new FormData();\n    formData.append('file', e.target.files[0])\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        'Authorization': `Bearer ${authService.getToken()}`\n      }\n    }\n    this.setState({uploading: true})\n    return axios.post(url, formData, config)\n      .finally(() => this.setState({uploading: false}))\n      .then(function (response) { \n        alert('video uploaded');\n      })\n      .catch(function (error) {\n        console.error(error);\n      });\n  }\n  \n  render() {\n    let waitingLabel;\n    if (this.state.uploading) {\n      waitingLabel = <label>video is being uploaded...</label>\n    }\n    return(\n      <div>\n        <h2>Uploader</h2>\n        <input accept=\"video/mp4\" type=\"file\" name=\"file\" onChange={(e)=>this.onChange(e)} />\n        {waitingLabel}\n      </div>\n    )\n  }\n}\n\nexport default UploadVideo;","import React, { Component } from 'react';\n\nclass Forbidden extends Component {\n  \n  render() {\n    return(\n      <div>\n        <h2>No access!!!</h2>\n      </div>\n    )\n  }\n}\n\nexport default Forbidden;","\nimport React from 'react';\nimport AuthService from './components/AuthService';\nimport Auth from './components/Auth';\nimport Videos from './components/Videos';\nimport UploadVideo from './components/UploadVideo';\nimport Forbidden from './components/Forbidden';\nimport { BrowserRouter as Router, Route, Link, Redirect } from \"react-router-dom\";\nimport './App.css';\n\nconst auth = new AuthService();\n\nconst PrivateRoute = ({ component: Component, ...rest }) => (\n  <Route {...rest} render={(props) => (\n    auth.loggedIn()\n      ? <Component {...props} />\n      : <Redirect to={{pathname: '/forbidden', state: { from: props.location } }} />\n  )} />\n)\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <a href=\"https://videos.auth.us-east-1.amazoncognito.com/login?response_type=token&client_id=74ot3emm9hbujvmigpq6mbiht4&redirect_uri=https://tomazjunior.github.io/serverless-video-upload/auth/callback\">Login</a>\n          </li>\n          <li>\n            <Link to=\"/uploader\">Upload a Video</Link>\n          </li>\n          <li>\n            <Link to=\"/videos\">Videos</Link>\n          </li>\n        </ul>\n\n        <hr />\n\n        <Route path=\"/auth/callback\" component={Auth} />\n        <PrivateRoute path=\"/uploader\" component={UploadVideo} />\n        <PrivateRoute path=\"/videos\" component={Videos} />\n        <Route path=\"/forbidden\" component={Forbidden} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}